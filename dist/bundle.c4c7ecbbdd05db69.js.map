{"version":3,"file":"bundle.c4c7ecbbdd05db69.js","mappings":"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","sources":["webpack:///./src/script.js"],"sourcesContent":["//import './style.css'\n//import * as THREE from 'three'\n//import gsap from 'gsap'\n//import fragmentShader from './shaders/fragment.glsl'\n//import vertexShader from './shaders/vertex.glsl'\n\n// Canvas\nconst canvas = document.querySelector('canvas.webgl')\n\n// Scene\nconst scene = new THREE.Scene()\n\n/**\n * Sizes\n */\nconst canvasContainer = document.querySelector('.canvas')\nconst sizes = {\n    width: canvasContainer.offsetWidth,\n    height: canvasContainer.offsetHeight\n}\n\nwindow.addEventListener('resize', () =>\n{\n    // Update sizes\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    // Update camera\n    camera.aspect = sizes.width / sizes.height\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n})\n\n/**\n * Camera\n */\nconst camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\ncamera.position.z = 15\nscene.add(camera)\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader()\nconst earthUVMap = textureLoader.load('./textures/earth_uv_map.jpg')\n\n/**\n * Objects\n */\n// earth\nconst sphere = new THREE.Mesh(\n    new THREE.SphereGeometry(5, 50, 50),\n    new THREE.ShaderMaterial(\n        {\n            vertexShader: `\n            varying vec2 vertexUV;\n            varying vec3 vertexNormal;\n\n            void main() \n            {\n                vertexUV = uv;\n                vertexNormal = normalize(normalMatrix * normal);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );  \n            }`,\n            fragmentShader: `\n            uniform sampler2D globeTexture;\n            varying vec2 vertexUV; //[0,0.24]\n            varying vec3 vertexNormal;\n            \n            void main() \n            {\n                float intensity = 1.05 - dot(vertexNormal, vec3(0,0,1));\n                vec3 atmosphere = vec3(0.3,0.6,1) * pow(intensity, 1.5);\n                gl_FragColor = vec4(atmosphere + texture2D(globeTexture, vertexUV).xyz, 1.0);\n            }`,\n            uniforms:\n            {\n                globeTexture:\n                {\n                    value: earthUVMap\n                }\n            }\n        }\n    )\n)\n\n// atmosphere\nconst atmosphere = new THREE.Mesh(\n    new THREE.SphereGeometry(5, 50, 50),\n    new THREE.ShaderMaterial(\n        {\n            vertexShader: `\n            varying vec3 vertexNormal;\n\n            void main() \n            {\n                vertexNormal = normalize(normalMatrix * normal);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );  \n            }`,\n            fragmentShader: `\n            varying vec3 vertexNormal; \n\n            void main() \n            {\n                float intensity = pow(0.6 - dot(vertexNormal, vec3(0,0,1.0)),2.0);\n                gl_FragColor = vec4(0.3,0.6,1.0,1.0) * intensity;\n            }`,\n            blending: THREE.AdditiveBlending,\n            side: THREE.BackSide\n        }\n    )\n)\natmosphere.scale.set(1.2,1.2,1.2)\n\nconst group = new THREE.Group()\ngroup.add(sphere, atmosphere)\nscene.add(group)\n\n/**\n * Stars\n */\nconst starGeometry = new THREE.BufferGeometry()\nconst starMaterial = new THREE.PointsMaterial({\n    color: '#ffffff'\n})\n\nconst count = 2500\nconst positions = new Float32Array(count*3)\nfor(let i = 0; i < count; i+=3)\n{\n    const x = (Math.random() - 0.5) * 200\n    const y = (Math.random() - 0.5) * 200\n    const z = - Math.random() * 500\n    positions[i] = x\n    positions[i+1] = y\n    positions[i+2] = z\n}\nstarGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\nconst stars = new THREE.Points(starGeometry, starMaterial)\nscene.add(stars)\n\n/**\n * Mouse\n */\nconst mouse = {}\nwindow.addEventListener('mousemove', (event) =>\n{\n    mouse.x = event.clientX / sizes.width * 2 - 1\n    mouse.y = - (event.clientY / sizes.height) * 2 + 1\n})\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock()\n\nconst tick = () =>\n{\n    const elapsedTime = clock.getElapsedTime()\n\n    sphere.rotation.y = elapsedTime * 0.1\n\n    if(mouse.x || mouse.y)\n    {\n    gsap.to(group.rotation, {y: mouse.x * 0.4, duration: 2})\n    gsap.to(group.rotation, {x: mouse.y * 0.2, duration: 2})\n    }\n    \n    const scale = Math.cos(elapsedTime)\n    stars.position.set(scale,scale,scale)\n    // Render\n    renderer.render(scene, camera)\n\n    // Call tick again on the next frame\n    window.requestAnimationFrame(tick)\n}\n\ntick()"],"names":["canvas","document","querySelector","scene","THREE","Scene","canvasContainer","sizes","width","offsetWidth","height","offsetHeight","window","addEventListener","innerWidth","innerHeight","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","PerspectiveCamera","position","z","add","WebGLRenderer","antialias","earthUVMap","TextureLoader","load","sphere","Mesh","SphereGeometry","ShaderMaterial","vertexShader","fragmentShader","uniforms","globeTexture","value","atmosphere","blending","AdditiveBlending","side","BackSide","scale","set","group","Group","starGeometry","BufferGeometry","starMaterial","PointsMaterial","color","positions","Float32Array","count","i","x","random","y","setAttribute","BufferAttribute","stars","Points","mouse","event","clientX","clientY","clock","Clock","tick","elapsedTime","getElapsedTime","rotation","gsap","to","duration","cos","render","requestAnimationFrame"],"sourceRoot":""}